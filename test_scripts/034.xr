union unn(
    a: int,
    b: rational
)
struct strct(
    a: int,
    b: rational
)

fn foo(x: unn, y: strct)->rational {
    fn handle_a(v: int)->rational {
        ((v*y::a)/1) + y::b
    }
    fn handle_b(v: rational)->rational {
        v*(y::a/1) + y::b
    }

    (x::a.map(handle_a) || x::b.map(handle_b)).value()
}

fn main()->bool {
    assert(foo(unn::b(3/4), strct(3, 4.0)) == 25/4)
    && assert(foo(unn::a(5), strct(3, 4.0)) == 19/1)
}