fn main()->bool{
    assert(is_close(1.5 / 1.5, 1.0))
    && assert(is_close(-1.5 / 1.5, -1.0))
    && assert(is_close(2.0 / 1.5, 1.33333333333333))
    && assert(is_close(-2.0 / 1.5, -1.33333333333333))
    && assert(is_close(0.4 / 1.5, 0.266666666666667))
    && assert(is_close(-0.4 / 1.5, -0.266666666666667))
    && assert(is_close(1.5 / -1.5, -1.0))
    && assert(is_close(-1.5 / -1.5, 1.0))
    && assert(is_close(2.0 / -1.5, -1.33333333333333))
    && assert(is_close(-2.0 / -1.5, 1.33333333333333))
    && assert(is_close(0.4 / -1.5, -0.266666666666667))
    && assert(is_close(-0.4 / -1.5, 0.266666666666667))
    && assert(is_close(1.5 / 2.0, 0.75))
    && assert(is_close(-1.5 / 2.0, -0.75))
    && assert(is_close(2.0 / 2.0, 1.0))
    && assert(is_close(-2.0 / 2.0, -1.0))
    && assert(is_close(0.4 / 2.0, 0.2))
    && assert(is_close(-0.4 / 2.0, -0.2))
    && assert(is_close(1.5 / -2.0, -0.75))
    && assert(is_close(-1.5 / -2.0, 0.75))
    && assert(is_close(2.0 / -2.0, -1.0))
    && assert(is_close(-2.0 / -2.0, 1.0))
    && assert(is_close(0.4 / -2.0, -0.2))
    && assert(is_close(-0.4 / -2.0, 0.2))
    && assert(is_close(1.5 / 0.4, 3.75))
    && assert(is_close(-1.5 / 0.4, -3.75))
    && assert(is_close(2.0 / 0.4, 5.0))
    && assert(is_close(-2.0 / 0.4, -5.0))
    && assert(is_close(0.4 / 0.4, 1.0))
    && assert(is_close(-0.4 / 0.4, -1.0))
    && assert(is_close(1.5 / -0.4, -3.75))
    && assert(is_close(-1.5 / -0.4, 3.75))
    && assert(is_close(2.0 / -0.4, -5.0))
    && assert(is_close(-2.0 / -0.4, 5.0))
    && assert(is_close(0.4 / -0.4, -1.0))
    && assert(is_close(-0.4 / -0.4, 1.0))
}