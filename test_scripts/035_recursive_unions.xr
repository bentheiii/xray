union Chain(
    last: int,
    next: Chain
)

fn foo(x: Chain)->int {
    fn helper(x0: Chain, ret: int)->int {
        if(x0::last.has_value(),
            ret+x0::last.value(),
            helper(x0::next.value(), ret+100)
        )
    }
    helper(x, 0)
}

fn chain(x: int)->Chain{
    fn helper(x0: int, ret: Chain)->Chain {
        if(x0>100,
            helper(x0-100, Chain::next(ret)),
            ret
        )
    }
    helper(x, Chain::last(x % 100))
}

fn eq(x: Chain, y: Chain)->bool {
          (x::last.has_value() && y::last.has_value())
            .then(x::last.value() == y::last.value())
        || (x::next.has_value() && y::next.has_value())
            .then(eq(x::next.value(), y::next.value()))
        || false
    }


fn main()->bool {
    let z = Chain::next(Chain::next(Chain::last(5)));
    assert(foo(z) == 205)
    && assert(chain(205) == z)
}