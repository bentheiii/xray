header = {SOI ~ top_level_execution ~ EOI}
eval = {SOI ~ expression ~ EOI}

top_level_execution = {import* ~ execution}
execution = {declaration*}
declaration = {value | function | compound_def}
expression = {
    expression1 ~ (BINARY_OP ~ expression1)*
}
expression1 = {
    (UNARY_OP)* ~ expression2
}
expression2 = {
    expression3 ~ (accessor)*
}
 accessor = _{
    method
    | call
    | member
    | index
 }
  method = {"." ~ CNAME ~ call_args}
     call_args = {
        "(" ~ container_elements? ~ ","? ~ ")"
     }
  member = {"::" ~ CNAME}
  call = {call_args}
  index = {"[" ~ expression ~ "]"}
expression3 = _{
    STRING
    | RAW_STRING
    | bool
    | NUMBER_ANY
    | container
    | "(" ~ expression ~ ")"
    | lambda_func
    | tuple
    | turbofish_cname
    | dyn_bind_cname
    | CNAME
}
 container = { "[" ~ container_elements? ~ ","? ~ "]" }
  container_elements = {expression ~ (","~expression)*}
 tuple = {
   "(" ~ container_elements? ~ ","? ~ ")"
 }
 bool = @{"true"|"false"}
 turbofish_cname = {CNAME ~ "::<" ~ complete_type ~ (","~complete_type)* ~ ">"}
 dyn_bind_cname = {CNAME ~ "<" ~ complete_type ~ (","~complete_type)* ~ ">"}
 lambda_func = { "(" ~ function_parameters_opt ~ ")" ~ "->" ~ "{" ~ expression ~ "}" }

UNARY_OP = _{UNARY_PLUS | UNARY_MINUS | UNARY_NOT}
 UNARY_PLUS = {"+"}
 UNARY_MINUS = {"-"}
 UNARY_NOT = {"!"}
BINARY_OP = _{BINARY_POW | BINARY_ADD | BINARY_SUB | BINARY_MUL | BINARY_DIV | BINARY_MOD | BINARY_AND | BINARY_OR
             | BINARY_EQ | BINARY_NE | BINARY_LE | BINARY_GE | BINARY_LT | BINARY_GT | BINARY_BIT_AND | BINARY_BIT_OR
             | BINARY_BIT_XOR}
 BINARY_ADD = {"+"}
 BINARY_SUB = {"-"}
 BINARY_MUL = {"*"}
 BINARY_DIV = {"/"}
 BINARY_POW = {"**"}
 BINARY_AND = {"&&"}
 BINARY_OR = {"||"}
 BINARY_LT = {"<"}
 BINARY_GT = {">"}
 BINARY_LE = {"<="}
 BINARY_GE = {">="}
 BINARY_EQ = {"=="}
 BINARY_NE = {"!="}
 BINARY_MOD = {"%"}
 BINARY_BIT_AND = {"&"}
 BINARY_BIT_OR = {"|"}
 BINARY_BIT_XOR = {"^"}

pub_opt = {"public"?}

import = {pub_opt ~ "import " ~ import_spec ~ ";"}
 import_spec = {CNAME ~ ("::" ~ CNAME)* ~ ("::" ~ import_group)?}
 import_group = {"{" ~ CNAME ~ (", " ~ CNAME)* ~ ","? ~ "}"| "{" ~ ("*"|"**") ~ ","? ~ "}" }

value = {pub_opt ~ "let " ~ CNAME ~ explicit_type_opt ~ "=" ~ expression ~ ";"}
 explicit_type_opt = {explicit_type?}
 explicit_type = _{":" ~ complete_type}

function = {pub_opt ~"fn " ~ CNAME ~ generic_signature_opt ~ "(" ~ function_parameters_opt ~ ","? ~ ")" ~ "->" ~ complete_type ~ function_body}
 generic_signature_opt = { generic_signature? }
 function_body = {"{"~execution~expression~"}" }
 generic_signature = {"<" ~ generic_parameter ~ ("," ~ generic_parameter)* ~ ">"}
 generic_parameter = {CNAME ~ generic_constraint?}
 generic_constraint = {":" ~ complete_type}

 function_parameters_opt = { function_parameters? }
 function_parameters = {(parameter ~ ",")* ~ parameter}
 parameter = {CNAME ~ ":" ~ complete_type ~ default_value?}
 default_value = {"?="~expression}

compound_def = {pub_opt ~ compound_kind ~ CNAME ~ generic_signature_opt ~ "(" ~ compound_parameters ~ ")"}
 compound_kind = {"struct" | "union"}
 compound_parameters = {(compound_parameter ~ ",")* ~ (compound_parameter ~ (",")?)?}
 compound_parameter = {CNAME ~ ":" ~ complete_type}

complete_type = {
  CNAME ~ generic_arguments?
  | signature
  | tup_type
  | auto_type
 }
 generic_arguments = {"<" ~ (complete_type ~ ",")* ~ complete_type ~ ">"}
 signature = {"(" ~ param_specs_opt ~ ")" ~ "->" ~ "(" ~ complete_type ~ ")"}
 param_specs_opt = { param_specs? }
 param_specs = {(complete_type ~ ",")* ~ complete_type}
 tup_type = {"(" ~ param_specs? ~ ")"}
 auto_type = {"$"}

CNAME = @{("_" | ASCII_ALPHA) ~ ("_" | ASCII_ALPHANUMERIC)*}

NUMBER_ANY = @{hexnum | binnum | num}
num = { int ~ ("." ~ num_digit+)? ~ (^"e" ~ "-"? ~ int)? }
 int = { num_digit+ }
 num_digit = {ASCII_DIGIT|"_"}
hexnum = { "0x" ~ hex_digit+ }
 hex_digit = {ASCII_HEX_DIGIT|"_"}
binnum = { "0b" ~ bin_digit+ }
 bin_digit = {"0"|"1"|"_"}

STRING = {single_quote_str | double_quote_str}
 single_quote_str = _{PUSH("#"*) ~ "'" ~ inner_string_single ~ "'" ~ POP}
  inner_string_single = @{(!("'" ~ PEEK)~ ("\'" | "\\\\" | ANY))*}
 double_quote_str = _{PUSH("#"*) ~ "\"" ~ inner_string_double ~ "\"" ~ POP}
  inner_string_double = @{(!("\"" ~ PEEK)~ ("\\\"" | "\\\\" | ANY))*}

RAW_STRING = {"r" ~ (raw_single_quote_str | raw_double_quote_str)}
 raw_single_quote_str = _{PUSH("#"*) ~ "'" ~ raw_inner_string_single ~ "'" ~ POP}
  raw_inner_string_single = @{(!("'" ~ PEEK)~ ANY)*}
 raw_double_quote_str = _{PUSH("#"*) ~ "\"" ~ raw_inner_string_double ~ "\"" ~ POP}
  raw_inner_string_double = @{(!("\"" ~ PEEK)~ ANY)*}

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
COMMENT = _{ ("/*" ~ (!"*/" ~ ANY)* ~ "*/") | ("//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE) }